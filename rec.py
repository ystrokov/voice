from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import subprocess
import time
import signal
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MEETING_URL = "https://meet.wb.ru/platformPlanning"
USERNAME = "AutoBot"
RECORD_DURATION = 25  # –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (30 –º–∏–Ω—É—Ç)

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
OUTPUT_DIR = "voice"
OUTPUT_FILE = os.path.join(OUTPUT_DIR, "meeting_audio.mp3")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
if not os.path.exists(OUTPUT_DIR):
    os.makedirs(OUTPUT_DIR)

# –ü—É—Ç–∏ –∫ Chromedriver –∏ FFmpeg
CHROMEDRIVER_PATH = "/usr/bin/chromedriver"
FFMPEG_PATH = "/usr/bin/ffmpeg"  # –ü—É—Ç—å –∫ ffmpeg

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è FFmpeg
if not os.path.isfile(FFMPEG_PATH):
    raise FileNotFoundError(f"‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {FFMPEG_PATH}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ü–∏–π –¥–ª—è Chrome
chrome_options = Options()
chrome_options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
chrome_options.add_argument("--no-sandbox")  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
chrome_options.add_argument("--disable-dev-shm-usage")  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ –≤–º–µ—Å—Ç–æ /dev/shm –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ
chrome_options.add_argument("--disable-gpu")  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GPU –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
chrome_options.add_argument("--window-size=1920,1080")  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
chrome_options.add_argument("--use-fake-ui-for-media-stream")  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∏ –∫–∞–º–µ—Ä–µ
chrome_options.add_argument("--autoplay-policy=no-user-gesture-required")  # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º–µ–¥–∏–∞ –±–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
chrome_options.add_argument("--alsa-output-device=hw:0,0")  # –£–∫–∞–∑–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ –∑–≤—É–∫–∞ –Ω–∞ ALSA (–¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ)

# –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
AUDIO_DEVICE_NAME = 'hw:0,0'  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ hw:0,0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
def start_audio_recording():
    print(f"üéôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ... –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {OUTPUT_FILE}")
    try:
        process = subprocess.Popen([
            FFMPEG_PATH, '-f', 'alsa', '-i', AUDIO_DEVICE_NAME, '-t', str(RECORD_DURATION),
            OUTPUT_FILE
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return process
    except FileNotFoundError:
        print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–ø–∏—Å–∏: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
def stop_audio_recording(process):
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ...")
    if process and process.poll() is None:
        try:
            process.terminate()
            stdout, stderr = process.communicate()
            print(f"üîç –õ–æ–≥ FFmpeg STDOUT:\n{stdout.decode()}")
            print(f"üîç –õ–æ–≥ FFmpeg STDERR:\n{stderr.decode()}")
            if os.path.exists(OUTPUT_FILE):
                print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {OUTPUT_FILE}")
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {OUTPUT_FILE}")
            process.wait(timeout=5)
            print("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏: {e}")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def join_and_record(meeting_url, username):
    driver = None
    try:
        print(f"üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—Å—Ç—Ä–µ—á–µ: {meeting_url}")
        service = Service(executable_path=CHROMEDRIVER_PATH)
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.get(meeting_url)

        wait = WebDriverWait(driver, 30)

        # –í–≤–æ–¥ –∏–º–µ–Ω–∏
        print("üîç –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏...")
        name_input = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='premeeting-name-input']")))
        name_input.send_keys(username)
        print("‚úÖ –ò–º—è –≤–≤–µ–¥–µ–Ω–æ.")

        # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å"
        print("üîç –û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–Ω—è—Ç—å'...")
        consent_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="videoconference_page"]/div[4]/div[1]/div/div/div[1]/div[2]/div/div')))
        consent_button.click()
        print("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç—ã.")

        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤—Å—Ç—Ä–µ—á–µ
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤—Å—Ç—Ä–µ—á–µ...")
        time.sleep(10)  # –í—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏

        # –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
        recording_process = start_audio_recording()
        if recording_process:
            time.sleep(RECORD_DURATION)
            stop_audio_recording(recording_process)
        else:
            print("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if driver:
            driver.quit()
            print("üö™ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    join_and_record(MEETING_URL, USERNAME)
